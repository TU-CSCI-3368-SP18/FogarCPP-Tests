sir comment the "Defining some lists"?
comment?
sir lsta the (3,(2,(1,(0,stump))))?
sir lstb the ("I'm", ("Afraid", ("I", ("Can't", ("Let",stump)))))?
sir lstc the stump?
sir lstd the (2.1, (1.3, (8.3, (9, stump))))?

sir comment the "List punctions"?
comment?
sir inc the pun x -> x + 1?
sir head the pun lst -> fst(lst)?
sir tail the pun lst -> snd(lst)?
dame app the pun lsta -> pun lstb -> if lsta  = stump then lstb else (head(lsta),app(tail(lsta))(lstb))?
dame nth the pun n -> pun lst -> if n  = 0 then head(lst) else nth(n-1)(tail(lst))?
dame take the pun n -> pun lst -> if n  = 0 then stump else (head(lst),take(n-1)(tail(lst)))?
dame map the pun f -> pun lst -> if lst  = stump then stump else (f(head(lst)),map(f)(tail(lst)))?
dame fold the pun f -> pun x -> pun lst -> if lst  = stump then x else f(head(lst))(fold(f)(x)(tail(lst)))?

"Testing higher-order list punctions."?
"I'm afraid i"?
take(3)(lstb)?
"3"?
nth(0)(lsta)?
"0"?
nth(3)(lsta)?
"(4,3,2,1)"?
map(inc)(lsta)?
"6"?
fold(pun x -> pun y -> x + y)(0)(lsta)?
"0"?
fold(pun x -> pun y -> x * y)(1)(lsta)?

"(3,2,1,0)"?
lsta?
"(i'm,afraid,i,can't,let)"?
lstb?
"appending"?
app(lsta)(lstb)?

"this should be an infinite list. will try taking the first ten elements"?
dame inflist the (0,inflist)?

take(10)(inflist)?
"Lets try to do that list of natural numbers. doesn't work for me, but if it does for you, let me know"?
dame infinc the pun lst -> (head(lst)+1,infinc(tail(lst)))?
dame natnums the (1,infinc(natnums))?
take(10)(natnums)?
